// <auto-generated />
using System;
using CodeCraft.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeCraft.Data.Migrations
{
    [DbContext(typeof(CodeCraftDbContext))]
    partial class CodeCraftDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeCraft.Data.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7749),
                            UserId = "a660cfef-d951-47e4-b40d-2272788f94c1"
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationCloseDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ApplicationOpenDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Technologies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "PY412",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the basics of computer programming using the Python programming language.",
                            DifficultyLevel = "Beginner",
                            Duration = "6m",
                            Name = "Python Basics",
                            Price = 5000m,
                            Technologies = "Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7484)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "PY512",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore more advanced computer programming concepts using the Python programming language.",
                            DifficultyLevel = "Intermediate",
                            Duration = "6m",
                            Name = "Programming With Python",
                            Price = 5000m,
                            Technologies = "Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7493)
                        },
                        new
                        {
                            Id = 3,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "PY522",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the most advanced computer programming concepts using the Python programming language.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Advanced Python",
                            Price = 5000m,
                            Technologies = "Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7496)
                        },
                        new
                        {
                            Id = 4,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "ML512",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the basics of Machine Learning using the Python programming language.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Machine Learning Basics",
                            Price = 5000m,
                            Technologies = "Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7498)
                        },
                        new
                        {
                            Id = 5,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "ML522",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the most advanced Machine Learning techniques using the Python programming language.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Advanced Machine Learning",
                            Price = 5000m,
                            Technologies = "Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7501)
                        },
                        new
                        {
                            Id = 6,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "AI521",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the basics of Arificial Intelligence using the Python programming language.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Understanding Arificial Intelligence",
                            Price = 5000m,
                            Technologies = "Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7503)
                        },
                        new
                        {
                            Id = 7,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "AI612",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Become a certified Arificial Intelligence Engineer.",
                            DifficultyLevel = "Major",
                            Duration = "6m",
                            Name = "Arificial Intelligence Engineering",
                            Price = 5000m,
                            Technologies = "Python,Java,C++",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7506)
                        },
                        new
                        {
                            Id = 8,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "DL612",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Study the concept of Deep Learning, engineering complex deep neural networks that will revolutionize the modern world.",
                            DifficultyLevel = "Major",
                            Duration = "6m",
                            Name = "Deep Learning",
                            Price = 5000m,
                            Technologies = "Python,Java,C++",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7508)
                        },
                        new
                        {
                            Id = 9,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "JD412",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the basics of computer programming using the Java programming language.",
                            DifficultyLevel = "Beginner",
                            Duration = "6m",
                            Name = "Java Basics",
                            Price = 5000m,
                            Technologies = "Java",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7510)
                        },
                        new
                        {
                            Id = 10,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "JD512",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore more advanced computer programming concepts using the Java programming language.",
                            DifficultyLevel = "Intermediate",
                            Duration = "6m",
                            Name = "Programming With Java",
                            Price = 5000m,
                            Technologies = "Java",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7513)
                        },
                        new
                        {
                            Id = 11,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "JD522",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the most advanced computer programming concepts using the Java programming language.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Advanced Java",
                            Price = 5000m,
                            Technologies = "Java",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7515)
                        },
                        new
                        {
                            Id = 12,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CWD412",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Build beautiful and responsive websites using HTML, CSS and JavaScript.",
                            DifficultyLevel = "Beginner",
                            Duration = "6m",
                            Name = "Core Web Development",
                            Price = 5000m,
                            Technologies = "HTML,CSS,JavaScript",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7518)
                        },
                        new
                        {
                            Id = 13,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CWD422",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Design mobile-friendly websites using modern CSS techniques.",
                            DifficultyLevel = "Intermediate",
                            Duration = "6m",
                            Name = "Modern Web Design",
                            Price = 5000m,
                            Technologies = "React,Vue,Svelte,Tailwind,Bootstrap,Angular",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7520)
                        },
                        new
                        {
                            Id = 14,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CWD512",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Become a full-stack developer using MongoDB, Express, React, and Node.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Full-Stack Web Development",
                            Price = 5000m,
                            Technologies = "JavaScript,TypeScript,XML,JSON",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7523)
                        },
                        new
                        {
                            Id = 15,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "DBQ412",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Master SQL queries to analyze and manipulate data.",
                            DifficultyLevel = "Beginner",
                            Duration = "6m",
                            Name = "Database Queries Basics",
                            Price = 5000m,
                            Technologies = "SQL",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7525)
                        },
                        new
                        {
                            Id = 16,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CPP412",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the basics of computer programming using the C++ programming language.",
                            DifficultyLevel = "Beginner",
                            Duration = "6m",
                            Name = "C++ Basics",
                            Price = 5000m,
                            Technologies = "C++",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7533)
                        },
                        new
                        {
                            Id = 17,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CPP512",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore more advanced computer programming concepts using the C++ programming language.",
                            DifficultyLevel = "Intermediate",
                            Duration = "6m",
                            Name = "Programming With C++",
                            Price = 5000m,
                            Technologies = "C++",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7536)
                        },
                        new
                        {
                            Id = 18,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CPP522",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the most advanced computer programming concepts using the C++ programming language.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Advanced C++",
                            Price = 5000m,
                            Technologies = "C++",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7538)
                        },
                        new
                        {
                            Id = 19,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CS512",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the basics of Cyber Security.",
                            DifficultyLevel = "Intermediate",
                            Duration = "6m",
                            Name = "Cyber Security Basics",
                            Price = 5000m,
                            Technologies = "Python,C++",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7541)
                        },
                        new
                        {
                            Id = 20,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CS522",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the most advanced Cyber Security concepts and tecniques.",
                            DifficultyLevel = "Advanced",
                            Duration = "6m",
                            Name = "Advanced Cyber Security",
                            Price = 5000m,
                            Technologies = "C,C++,Assembly,Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7543)
                        },
                        new
                        {
                            Id = 21,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "AS612",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Become a certified Offensive Security specialist.",
                            DifficultyLevel = "Major",
                            Duration = "6m",
                            Name = "Offensive Security",
                            Price = 5000m,
                            Technologies = "C,C++,Assembly,Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7545)
                        },
                        new
                        {
                            Id = 22,
                            ApplicationCloseDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationOpenDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "DS612",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Become a certified Defensive Security specialist.",
                            DifficultyLevel = "Major",
                            Duration = "6m",
                            Name = "Defensive Security",
                            Price = 5000m,
                            Technologies = "C,C++,Assembly,Python",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7548)
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.CourseDepartment", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("CourseId", "DepartmentId")
                        .IsUnique();

                    b.ToTable("CourseDepartment");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 3,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 4,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 4,
                            DepartmentId = 2
                        },
                        new
                        {
                            CourseId = 5,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 5,
                            DepartmentId = 2
                        },
                        new
                        {
                            CourseId = 6,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 6,
                            DepartmentId = 2
                        },
                        new
                        {
                            CourseId = 7,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 7,
                            DepartmentId = 2
                        },
                        new
                        {
                            CourseId = 8,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 8,
                            DepartmentId = 2
                        },
                        new
                        {
                            CourseId = 9,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 10,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 11,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 12,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 12,
                            DepartmentId = 4
                        },
                        new
                        {
                            CourseId = 13,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 13,
                            DepartmentId = 4
                        },
                        new
                        {
                            CourseId = 14,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 14,
                            DepartmentId = 4
                        },
                        new
                        {
                            CourseId = 15,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 16,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 17,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 18,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 19,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 19,
                            DepartmentId = 3
                        },
                        new
                        {
                            CourseId = 20,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 20,
                            DepartmentId = 3
                        },
                        new
                        {
                            CourseId = 21,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 21,
                            DepartmentId = 3
                        },
                        new
                        {
                            CourseId = 22,
                            DepartmentId = 1
                        },
                        new
                        {
                            CourseId = 22,
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IT",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore a comprehensive range of Information Technology (IT) courses designed to equip learners with the knowledge and skills needed to excel in the dynamic field of IT. Our curriculum spans from fundamental concepts to advanced technical expertise, ensuring a well-rounded understanding of the latest technologies and industry practices.",
                            Name = "Information Technology",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7554)
                        },
                        new
                        {
                            Id = 2,
                            Code = "ML",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore a comprehensive range of Machine Learning (ML) courses designed to equip learners with the knowledge and skills needed to excel in the dynamic field of Machine Learning. Our curriculum spans from fundamental concepts to advanced technical expertise, ensuring a well-rounded understanding of the latest technologies and industry practices.",
                            Name = "Machine Learning",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7556)
                        },
                        new
                        {
                            Id = 3,
                            Code = "CS",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore a comprehensive range of Cyber Security (CS) courses designed to equip learners with the knowledge and skills needed to excel in the dynamic field of Cyber Security. Our curriculum spans from fundamental concepts to advanced technical expertise, ensuring a well-rounded understanding of the latest technologies and industry practices.",
                            Name = "Cyber Security",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7558)
                        },
                        new
                        {
                            Id = 4,
                            Code = "WD",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore a comprehensive range of Web Development (WD) courses designed to equip learners with the knowledge and skills needed to excel in the dynamic field of Web Development. Our curriculum spans from fundamental concepts to advanced technical expertise, ensuring a well-rounded understanding of the latest technologies and industry practices.",
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7559)
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Enrollment", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AdmitDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("GraduateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("CourseId", "StudentId")
                        .IsUnique();

                    b.ToTable("Enrollment");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7785)
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7787)
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7789)
                        },
                        new
                        {
                            CourseId = 4,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7791)
                        },
                        new
                        {
                            CourseId = 5,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7792)
                        },
                        new
                        {
                            CourseId = 6,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7794)
                        },
                        new
                        {
                            CourseId = 7,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7796)
                        },
                        new
                        {
                            CourseId = 8,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7797)
                        },
                        new
                        {
                            CourseId = 9,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7799)
                        },
                        new
                        {
                            CourseId = 10,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7800)
                        },
                        new
                        {
                            CourseId = 11,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7802)
                        },
                        new
                        {
                            CourseId = 12,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7803)
                        },
                        new
                        {
                            CourseId = 13,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7805)
                        },
                        new
                        {
                            CourseId = 14,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7807)
                        },
                        new
                        {
                            CourseId = 15,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7808)
                        },
                        new
                        {
                            CourseId = 16,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7810)
                        },
                        new
                        {
                            CourseId = 17,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7811)
                        },
                        new
                        {
                            CourseId = 18,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7813)
                        },
                        new
                        {
                            CourseId = 19,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7814)
                        },
                        new
                        {
                            CourseId = 20,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7816)
                        },
                        new
                        {
                            CourseId = 21,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7818)
                        },
                        new
                        {
                            CourseId = 22,
                            StudentId = 1,
                            AdmitDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduateDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7819)
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inquiry");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Instructor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam mattis lacus vitae erat feugiat, quis vestibulum sapien maximus.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7752),
                            UserId = "3fe25d09-a2b3-4b40-9fdf-c2b24455411a"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Experienced software engineer specializing in Java and Python programming.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7754),
                            UserId = "2f5423d9-3322-438a-b9dc-ec1ffdb3db87"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Expert in data science and machine learning with 5+ years of teaching experience.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7756),
                            UserId = "41edb5b2-3dd8-4c40-b7db-96f609d2fdab"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Specializes in web development using React and Node.js. Passionate about mentoring.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7757),
                            UserId = "d7574773-b281-4c29-8e6b-bf818d5680a2"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Full-stack developer with expertise in PHP and Laravel. Loves teaching coding fundamentals.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7759),
                            UserId = "40c697c6-41ec-42fd-93c9-5624d377b710"
                        },
                        new
                        {
                            Id = 6,
                            Biography = "Creative designer and developer focusing on UI/UX and front-end frameworks like Angular.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7760),
                            UserId = "757d61fd-6c1c-4e4e-a4f4-8da6a37ff1bb"
                        },
                        new
                        {
                            Id = 7,
                            Biography = "Senior software developer with extensive experience in C# and .NET development.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Computer Science, PHD",
                            HireDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7761),
                            UserId = "76735e5b-52ef-4c2f-b17b-2456ff4b9556"
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.InstructorCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("CourseId", "InstructorId")
                        .IsUnique();

                    b.ToTable("InstructorCourse");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 3,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 4,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 5,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 6,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 7,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 8,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 9,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 10,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 11,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 12,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 13,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 14,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 15,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 16,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 17,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 18,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 19,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 20,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 21,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 22,
                            InstructorId = 1
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.InstructorStudentTestimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("InstructorId", "StudentId")
                        .IsUnique();

                    b.ToTable("InstructorStudentTestimonial");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7781),
                            UserId = "efff6fe8-7d05-4adf-8ed1-92ed552c113f"
                        });
                });

            modelBuilder.Entity("CodeCraft.Data.Models.StudentCourseTestimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("StudentCourseTestimonial");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "AspNetIdentity");

                    b.HasData(
                        new
                        {
                            Id = "a660cfef-d951-47e4-b40d-2272788f94c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6ce0396-5a4d-4e51-8e06-2c2f1c8db94e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = "Male",
                            LastName = "Default",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CODECRAFT.CO.ZA",
                            NormalizedUserName = "ADMIN@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "Default Address",
                            SecurityStamp = "11135b16-c31e-4f43-9101-3448c8a3ae7b",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7587),
                            UserName = "admin@codecraft.co.za"
                        },
                        new
                        {
                            Id = "3fe25d09-a2b3-4b40-9fdf-c2b24455411a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4aab0d9-5767-4f73-af08-520ac6cd9fcd",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "instructor@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Instructor",
                            Gender = "Male",
                            LastName = "Default",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR@CODECRAFT.CO.ZA",
                            NormalizedUserName = "INSTRUCTOR@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "Default Address",
                            SecurityStamp = "270d0113-0fd2-42a1-a5c8-1b5344b18eb5",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7648),
                            UserName = "instructor@codecraft.co.za"
                        },
                        new
                        {
                            Id = "efff6fe8-7d05-4adf-8ed1-92ed552c113f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f322670-968c-4077-b3b5-6e57c5e62eed",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Student",
                            Gender = "Male",
                            LastName = "Default",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@CODECRAFT.CO.ZA",
                            NormalizedUserName = "STUDENT@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "Default Address",
                            SecurityStamp = "43b058a8-c8e9-4ff1-8154-ebadae3515b0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7656),
                            UserName = "student@codecraft.co.za"
                        },
                        new
                        {
                            Id = "2f5423d9-3322-438a-b9dc-ec1ffdb3db87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ec5f592-5e60-4265-8d52-0f04f762144e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@CODECRAFT.CO.ZA",
                            NormalizedUserName = "JANE.SMITH@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "42 Some St., Cape Town",
                            SecurityStamp = "5fcde16b-6734-4fc0-9f86-23c3b37a3919",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7679),
                            UserName = "jane.smith@codecraft.co.za"
                        },
                        new
                        {
                            Id = "41edb5b2-3dd8-4c40-b7db-96f609d2fdab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec8b3c02-76f6-4a1b-ba8f-9021f6bb056e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.johnson@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            Gender = "Male",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL.JOHNSON@CODECRAFT.CO.ZA",
                            NormalizedUserName = "MICHAEL.JOHNSON@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "42 Some St., Johannesburg",
                            SecurityStamp = "21feab9b-2a55-44d2-a7e1-ac8d11c0fdf2",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7688),
                            UserName = "michael.johnson@codecraft.co.za"
                        },
                        new
                        {
                            Id = "d7574773-b281-4c29-8e6b-bf818d5680a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7ebc5ca-2800-4516-9195-a4ee88e2f7a8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.roberts@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            Gender = "Female",
                            LastName = "Roberts",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA.ROBERTS@CODECRAFT.CO.ZA",
                            NormalizedUserName = "LISA.ROBERTS@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "42 Some St., Durban",
                            SecurityStamp = "9c2013f8-2f50-472a-8942-4b7d0d45a6da",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7697),
                            UserName = "lisa.roberts@codecraft.co.za"
                        },
                        new
                        {
                            Id = "40c697c6-41ec-42fd-93c9-5624d377b710",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0e2ace0-a40d-49da-90ce-a31f8b56a132",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.khumalo@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Khumalo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.KHUMALO@CODECRAFT.CO.ZA",
                            NormalizedUserName = "DAVID.KHUMAL@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "42 Some St., Pretoria",
                            SecurityStamp = "b4198ac4-b5f8-46d2-b7b9-543c23235188",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7709),
                            UserName = "david.khumal@codecraft.co.za"
                        },
                        new
                        {
                            Id = "757d61fd-6c1c-4e4e-a4f4-8da6a37ff1bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf210b00-be2b-41ba-ab73-cf36273d2126",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "themba.carter@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "Themba",
                            Gender = "Male",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEMBA.CARTER@CODECRAFT.CO.ZA",
                            NormalizedUserName = "THEMBA.CARTER@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "42 Some St., Port Elizabeth",
                            SecurityStamp = "842bbd09-7342-4d24-92ab-37bef39def60",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7720),
                            UserName = "themba.carter@codecraft.co.za"
                        },
                        new
                        {
                            Id = "76735e5b-52ef-4c2f-b17b-2456ff4b9556",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8c3f19a-8a1c-42ae-8ff9-b961f52a2a0d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.wilson@codecraft.co.za",
                            EmailConfirmed = true,
                            FirstName = "James",
                            Gender = "Male",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.WILSON@CODECRAFT.CO.ZA",
                            NormalizedUserName = "JAMES.WILSON@CODECRAFT.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhCQlGvJ2nIuutdo/24eJEwLaqi5L/1x1GVHoJMAeL6fETW0j+oOg0QS+Te+MI+Aw==",
                            PhoneNumberConfirmed = false,
                            PhysicalAddress = "42 Some St., Bloemfontein",
                            SecurityStamp = "b61753d7-7d27-403a-84c1-66ab93469ab8",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 11, 29, 9, 23, 51, 208, DateTimeKind.Utc).AddTicks(7730),
                            UserName = "james.wilson@codecraft.co.za"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "AspNetIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "AspNetIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "AspNetIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "AspNetIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "AspNetIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "AspNetIdentity");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Admin", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.CourseDepartment", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeCraft.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Enrollment", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeCraft.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Instructor", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.InstructorCourse", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeCraft.Data.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.InstructorStudentTestimonial", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CodeCraft.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Student", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeCraft.Data.Models.StudentCourseTestimonial", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeCraft.Data.Models.Student", "Student")
                        .WithMany("CourseTestimonials")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeCraft.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CodeCraft.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeCraft.Data.Models.Student", b =>
                {
                    b.Navigation("CourseTestimonials");
                });
#pragma warning restore 612, 618
        }
    }
}
